{"version":3,"sources":["components/PokeCard.js","App.js","serviceWorker.js","index.js"],"names":["PokeCard","props","useState","pokemom","setPokemom","useEffect","pegaPokemom","pokeName","console","log","axios","get","then","response","data","catch","err","name","weight","types","type","sprites","src","front_default","alt","App","pokeList","setPokeList","setPokeName","results","className","onChange","event","target","value","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gSAkCeA,EA/BE,SAACC,GAAW,IAAD,EACMC,mBAAS,IADf,mBACjBC,EADiB,KACRC,EADQ,KAGxBC,qBAAU,WACNC,EAAYL,EAAMM,YACnB,CAACN,EAAMM,WAEV,IAAMD,EAAc,SAAAC,GAChBC,QAAQC,IAAIF,GACZG,IAAMC,IAAN,4CAA+CJ,IAC9CK,MAAK,SAAAC,GACFT,EAAWS,EAASC,SAEvBC,OAAM,SAAAC,GACHR,QAAQC,IAAIO,OAKpB,OACI,6BACI,2BAAIb,EAAQc,MACZ,2BAAId,EAAQe,OAAZ,OACCf,EAAQgB,OAAS,2BAAIhB,EAAQgB,MAAM,GAAGC,KAAKH,MAC3Cd,EAAQkB,SACL,yBAAKC,IAAKnB,EAAQkB,QAAQE,cAAeC,IAAKrB,EAAQc,SCkBvDQ,EAzCH,WAAO,IAAD,EACgBvB,mBAAS,IADzB,mBACTwB,EADS,KACCC,EADD,OAEgBzB,mBAAS,IAFzB,mBAETK,EAFS,KAECqB,EAFD,KAehBvB,qBAAU,WAVRK,IACCC,IAAI,gDACJC,MAAK,SAAAC,GACJc,EAAYd,EAASC,KAAKe,YAE3Bd,OAAM,SAAAC,GACLR,QAAQC,IAAI,YAOb,IAMH,OACE,yBAAKqB,UAAU,OACb,4BAAQC,SANW,SAAAC,GACrBJ,EAAYI,EAAMC,OAAOC,SAMrB,4BAAQA,MAAO,IAAf,UACCR,EAASS,KAAI,SAAAhC,GACZ,OACE,4BAAQiC,IAAKjC,EAAQc,KAAMiB,MAAO/B,EAAQc,MACvCd,EAAQc,UAKhBV,GAAY,kBAAC,EAAD,CAAUA,SAAUA,MC7BnB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.78999c31.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nconst PokeCard = (props) => {\r\n    const [pokemom, setPokemom] = useState({})\r\n    \r\n    useEffect(() => {\r\n        pegaPokemom(props.pokeName)\r\n    }, [props.pokeName])\r\n\r\n    const pegaPokemom = pokeName => {\r\n        console.log(pokeName)\r\n        axios.get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\r\n        .then(response => {\r\n            setPokemom(response.data)\r\n        })\r\n        .catch(err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n            <p>{pokemom.name}</p>\r\n            <p>{pokemom.weight} Kg</p>\r\n            {pokemom.types && <p>{pokemom.types[0].type.name}</p>}\r\n            {pokemom.sprites && (\r\n                <img src={pokemom.sprites.front_default} alt={pokemom.name} />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PokeCard","import React, {useState, useEffect} from 'react'\nimport \"./App.css\";\nimport axios from \"axios\"\nimport PokeCard from \"./components/PokeCard\"\n\nconst App = () => {\n  const [pokeList, setPokeList] = useState([])\n  const [pokeName, setPokeName] = useState(\"\")\n\n  const getPoke = () => {\n    axios\n    .get(\"https://pokeapi.co/api/v2/pokemon/?limit=151\")\n    .then(response => {\n      setPokeList(response.data.results)\n    })\n    .catch(err => {\n      console.log(\"err\")\n    })\n  }\n\n  useEffect(() => {\n    getPoke()\n\n  }, [])\n\n  const changePokeName = event => {\n    setPokeName(event.target.value)\n  }\n  \n  return (\n    <div className=\"App\">\n      <select onChange={changePokeName}>\n        <option value={\"\"}>Nenhum</option>\n        {pokeList.map(pokemom => {\n          return (\n            <option key={pokemom.name} value={pokemom.name}>\n              {pokemom.name}\n            </option>\n          )\n          })}\n      </select>\n      {pokeName && <PokeCard pokeName={pokeName} /> }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}